From a06cf7407a51a979f7c236ccfc8207e047f336e8 Mon Sep 17 00:00:00 2001
From: Your Name <you@example.com>
Date: Mon, 20 Jan 2025 14:56:26 +0000
Subject: [PATCH 1/3] Revert "ovl: support encoding fid from inode with no
 alias"

This reverts commit a1a541fbfa7e97c1100144db34b57553d7164ce5.
---
 fs/overlayfs/export.c | 46 ++++++++++++++++++++-----------------------
 1 file changed, 21 insertions(+), 25 deletions(-)

diff --git a/fs/overlayfs/export.c b/fs/overlayfs/export.c
index 3a17e4366f28..c56e4e0b8054 100644
--- a/fs/overlayfs/export.c
+++ b/fs/overlayfs/export.c
@@ -181,37 +181,35 @@ static int ovl_connect_layer(struct dentry *dentry)
  *
  * Return 0 for upper file handle, > 0 for lower file handle or < 0 on error.
  */
-static int ovl_check_encode_origin(struct inode *inode)
+static int ovl_check_encode_origin(struct dentry *dentry)
 {
-	struct ovl_fs *ofs = OVL_FS(inode->i_sb);
+	struct ovl_fs *ofs = OVL_FS(dentry->d_sb);
 	bool decodable = ofs->config.nfs_export;
-	struct dentry *dentry;
-	int err;
 
 	/* No upper layer? */
 	if (!ovl_upper_mnt(ofs))
 		return 1;
 
 	/* Lower file handle for non-upper non-decodable */
-	if (!ovl_inode_upper(inode) && !decodable)
+	if (!ovl_dentry_upper(dentry) && !decodable)
 		return 1;
 
 	/* Upper file handle for pure upper */
-	if (!ovl_inode_lower(inode))
+	if (!ovl_dentry_lower(dentry))
 		return 0;
 
 	/*
 	 * Root is never indexed, so if there's an upper layer, encode upper for
 	 * root.
 	 */
-	if (inode == d_inode(inode->i_sb->s_root))
+	if (dentry == dentry->d_sb->s_root)
 		return 0;
 
 	/*
 	 * Upper decodable file handle for non-indexed upper.
 	 */
-	if (ovl_inode_upper(inode) && decodable &&
-	    !ovl_test_flag(OVL_INDEX, inode))
+	if (ovl_dentry_upper(dentry) && decodable &&
+	    !ovl_test_flag(OVL_INDEX, d_inode(dentry)))
 		return 0;
 
 	/*
@@ -220,25 +218,17 @@ static int ovl_check_encode_origin(struct inode *inode)
 	 * ovl_connect_layer() will try to make origin's layer "connected" by
 	 * copying up a "connectable" ancestor.
 	 */
-	if (!decodable || !S_ISDIR(inode->i_mode))
-		return 1;
-
-	dentry = d_find_any_alias(inode);
-	if (!dentry)
-		return -ENOENT;
-
-	err = ovl_connect_layer(dentry);
-	dput(dentry);
-	if (err < 0)
-		return err;
+	if (d_is_dir(dentry) && decodable)
+		return ovl_connect_layer(dentry);
 
 	/* Lower file handle for indexed and non-upper dir/non-dir */
 	return 1;
 }
 
-static int ovl_dentry_to_fid(struct ovl_fs *ofs, struct inode *inode,
+static int ovl_dentry_to_fid(struct ovl_fs *ofs, struct dentry *dentry,
 			     u32 *fid, int buflen)
 {
+	struct inode *inode = d_inode(dentry);
 	struct ovl_fh *fh = NULL;
 	int err, enc_lower;
 	int len;
@@ -247,7 +237,7 @@ static int ovl_dentry_to_fid(struct ovl_fs *ofs, struct inode *inode,
 	 * Check if we should encode a lower or upper file handle and maybe
 	 * copy up an ancestor to make lower file handle connectable.
 	 */
-	err = enc_lower = ovl_check_encode_origin(inode);
+	err = enc_lower = ovl_check_encode_origin(dentry);
 	if (enc_lower < 0)
 		goto fail;
 
@@ -267,8 +257,8 @@ static int ovl_dentry_to_fid(struct ovl_fs *ofs, struct inode *inode,
 	return err;
 
 fail:
-	pr_warn_ratelimited("failed to encode file handle (ino=%lu, err=%i)\n",
-			    inode->i_ino, err);
+	pr_warn_ratelimited("failed to encode file handle (%pd2, err=%i)\n",
+			    dentry, err);
 	goto out;
 }
 
@@ -276,13 +266,19 @@ static int ovl_encode_fh(struct inode *inode, u32 *fid, int *max_len,
 			 struct inode *parent)
 {
 	struct ovl_fs *ofs = OVL_FS(inode->i_sb);
+	struct dentry *dentry;
 	int bytes, buflen = *max_len << 2;
 
 	/* TODO: encode connectable file handles */
 	if (parent)
 		return FILEID_INVALID;
 
-	bytes = ovl_dentry_to_fid(ofs, inode, fid, buflen);
+	dentry = d_find_any_alias(inode);
+	if (!dentry)
+		return FILEID_INVALID;
+
+	bytes = ovl_dentry_to_fid(ofs, dentry, fid, buflen);
+	dput(dentry);
 	if (bytes <= 0)
 		return FILEID_INVALID;
 
-- 
2.34.1

