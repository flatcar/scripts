https://bugs.gentoo.org/943880

--- a/lib/error.c
+++ b/lib/error.c
@@ -73,7 +73,7 @@ extern char *program_name;
 
 # if HAVE_STRERROR
 #  ifndef strerror		/* On some systems, strerror is a macro */
-char *strerror ();
+char *strerror (int);
 #  endif
 # else
 static char *
--- a/lib/long-options.c
+++ b/lib/long-options.c
@@ -36,11 +36,11 @@ static struct option const long_options[] =
 /* Process long options --help and --version, but only if argc == 2.
    Be careful not to gobble up `--'.  */
 void
-parse_long_options (argc, argv,version, usage)
-     int argc;
-     char **argv;
-     void (*version)();
-     void (*usage)();
+parse_long_options (
+     int argc,
+     char **argv,
+     void (*version)(void),
+     void (*usage)(int))
 {
   int c;
   int saved_opterr;
@@ -61,7 +61,7 @@ parse_long_options (argc, argv,version, usage)
 	  (*usage) (0);
 
 	case 'v':
-	  (*version) (0);
+	  (*version) ();
 	  /* printf ("%s (%s) %s\n", command_name, package, version_string); */
 	  exit (0);
 
--- a/lib/xstrtol.c
+++ b/lib/xstrtol.c
@@ -65,17 +65,17 @@ extern int errno;
 	}								\
       while (0)
 
-__unsigned long int __strtol ();
+__unsigned long int __strtol (const char*, char**, int);
 
 /* FIXME: comment.  */
 
 strtol_error
-__xstrtol (s, ptr, base, val, valid_suffixes)
-     const char *s;
-     char **ptr;
-     int base;
-     __unsigned long int *val;
-     const char *valid_suffixes;
+__xstrtol (
+     const char *s,
+     char **ptr,
+     int base,
+     __unsigned long int *val,
+     const char *valid_suffixes)
 {
   char *t_ptr;
   char **p;
--- a/src/lrz.c
+++ b/src/lrz.c
@@ -42,9 +42,9 @@
 #include "error.h"
 
 #ifndef STRICT_PROTOTYPES
-extern time_t time();
-extern char *strerror();
-extern char *strstr();
+extern time_t time(time_t*);
+extern char *strerror(int);
+extern char *strstr(const char* , const char*);
 #endif
 
 #ifndef HAVE_ERRNO_DECLARATION
--- a/src/lsz.c
+++ b/src/lsz.c
@@ -51,9 +51,9 @@ void *mm_addr=NULL;
 #include "error.h"
 
 #ifndef STRICT_PROTOTYPES
-extern time_t time();
-extern char *strerror();
-extern char *strstr();
+extern time_t time(time_t*);
+extern char *strerror(int);
+extern char *strstr(const char*, const char*);
 #endif
 
 #ifndef HAVE_ERRNO_DECLARATION
