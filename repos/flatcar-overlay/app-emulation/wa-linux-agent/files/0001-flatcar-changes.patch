From 948c6075656fde25703ba402f8cd94715feaa774 Mon Sep 17 00:00:00 2001
From: Krzesimir Nowak <knowak@microsoft.com>
Date: Mon, 27 Feb 2023 15:59:21 +0100
Subject: [PATCH] flatcar changes

Signed-off-by: Jeremi Piotrowski <jpiotrowski@microsoft.com>
---
 azurelinuxagent/common/osutil/coreos.py       |  40 +-----
 azurelinuxagent/common/osutil/coreoscommon.py |  59 +++++++++
 azurelinuxagent/common/osutil/factory.py      |   3 +
 azurelinuxagent/common/osutil/flatcar.py      |  78 +++++++++++
 .../common/persist_firewall_rules.py          |   1 +
 config/flatcar/waagent.conf                   | 122 ++++++++++++++++++
 init/flatcar/10-waagent-sysext.conf           |   2 +
 init/flatcar/waagent.service                  |  31 +++++
 setup.py                                      |  20 ++-
 9 files changed, 313 insertions(+), 43 deletions(-)
 create mode 100644 azurelinuxagent/common/osutil/coreoscommon.py
 create mode 100644 azurelinuxagent/common/osutil/flatcar.py
 create mode 100644 config/flatcar/waagent.conf
 create mode 100644 init/flatcar/10-waagent-sysext.conf
 create mode 100644 init/flatcar/waagent.service

diff --git a/azurelinuxagent/common/osutil/coreos.py b/azurelinuxagent/common/osutil/coreos.py
index 373727e2..63578932 100644
--- a/azurelinuxagent/common/osutil/coreos.py
+++ b/azurelinuxagent/common/osutil/coreos.py
@@ -18,10 +18,10 @@
 
 import os
 from azurelinuxagent.common.utils import shellutil
-from azurelinuxagent.common.osutil.default import DefaultOSUtil
+from azurelinuxagent.common.osutil.coreoscommon import CoreosCommonUtil
 
 
-class CoreOSUtil(DefaultOSUtil):
+class CoreOSUtil(CoreosCommonUtil):
 
     def __init__(self):
         super(CoreOSUtil, self).__init__()
@@ -46,42 +46,6 @@ class CoreOSUtil(DefaultOSUtil):
     def get_agent_bin_path():
         return "/usr/share/oem/bin"
 
-    def is_sys_user(self, username):
-        # User 'core' is not a sysuser.
-        if username == 'core':
-            return False
-        return super(CoreOSUtil, self).is_sys_user(username)
-
-    def is_dhcp_enabled(self):
-        return True
-
-    def start_network(self):
-        return shellutil.run("systemctl start systemd-networkd", chk_err=False)
-
-    def restart_if(self, ifname=None, retries=None, wait=None):
-        shellutil.run("systemctl restart systemd-networkd")
-
-    def restart_ssh_service(self):
-        # SSH is socket activated on CoreOS.  No need to restart it.
-        pass
-
-    def stop_dhcp_service(self):
-        return shellutil.run("systemctl stop systemd-networkd", chk_err=False)
-
-    def start_dhcp_service(self):
-        return shellutil.run("systemctl start systemd-networkd", chk_err=False)
-
-    def start_agent_service(self):
-        return shellutil.run("systemctl start {0}".format(self.service_name), chk_err=False)
-
-    def stop_agent_service(self):
-        return shellutil.run("systemctl stop {0}".format(self.service_name), chk_err=False)
-
-    def get_dhcp_pid(self):
-        return self._get_dhcp_pid(
-            ["systemctl", "show", "-p", "MainPID", "systemd-networkd"],
-            transform_command_output=lambda o: o.replace("MainPID=", ""))
-
     def conf_sshd(self, disable_password):
         # In CoreOS, /etc/sshd_config is mount readonly.  Skip the setting.
         pass
diff --git a/azurelinuxagent/common/osutil/coreoscommon.py b/azurelinuxagent/common/osutil/coreoscommon.py
new file mode 100644
index 00000000..9008ff20
--- /dev/null
+++ b/azurelinuxagent/common/osutil/coreoscommon.py
@@ -0,0 +1,59 @@
+#
+# Copyright 2023 Microsoft Corporation
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# Requires Python 2.6+ and Openssl 1.0+
+#
+
+import azurelinuxagent.common.utils.shellutil as shellutil
+from azurelinuxagent.common.osutil.default import DefaultOSUtil
+
+
+class CoreosCommonUtil(DefaultOSUtil):
+
+    def is_sys_user(self, username):
+        # User 'core' is not a sysuser.
+        if username == 'core':
+            return False
+        return super(CoreosCommonUtil, self).is_sys_user(username)
+
+    def is_dhcp_enabled(self):
+        return True
+
+    def start_network(self):
+        return shellutil.run("systemctl start systemd-networkd", chk_err=False)
+
+    def restart_if(self, ifname=None, retries=None, wait=None):
+        shellutil.run("systemctl restart systemd-networkd")
+
+    def restart_ssh_service(self):
+        # SSH is socket activated on CoreOS.  No need to restart it.
+        pass
+
+    def stop_dhcp_service(self):
+        return shellutil.run("systemctl stop systemd-networkd", chk_err=False)
+
+    def start_dhcp_service(self):
+        return shellutil.run("systemctl start systemd-networkd", chk_err=False)
+
+    def start_agent_service(self):
+        return shellutil.run("systemctl start {0}".format(self.service_name), chk_err=False)
+
+    def stop_agent_service(self):
+        return shellutil.run("systemctl stop {0}".format(self.service_name), chk_err=False)
+
+    def get_dhcp_pid(self):
+        return self._get_dhcp_pid(
+            ["systemctl", "show", "-p", "MainPID", "systemd-networkd"],
+            transform_command_output=lambda o: o.replace("MainPID=", ""))
diff --git a/azurelinuxagent/common/osutil/factory.py b/azurelinuxagent/common/osutil/factory.py
index 83123e3f..b9257a9b 100644
--- a/azurelinuxagent/common/osutil/factory.py
+++ b/azurelinuxagent/common/osutil/factory.py
@@ -28,6 +28,7 @@ from .coreos import CoreOSUtil
 from .debian import DebianOSBaseUtil, DebianOSModernUtil
 from .default import DefaultOSUtil
 from .devuan import DevuanOSUtil
+from .flatcar import FlatcarUtil
 from .freebsd import FreeBSDOSUtil
 from .gaia import GaiaOSUtil
 from .iosxe import IosxeOSUtil
@@ -88,6 +89,8 @@ def _get_osutil(distro_name, distro_code_name, distro_version, distro_full_name)
         return DebianOSBaseUtil()
 
     if distro_name in ("flatcar", "coreos") or distro_code_name in ("flatcar", "coreos"):
+        if Version(distro_version) >= Version("3550"):
+            return FlatcarUtil()
         return CoreOSUtil()
 
     if distro_name in ("suse", "sle_hpc", "sles", "opensuse"):
diff --git a/azurelinuxagent/common/osutil/flatcar.py b/azurelinuxagent/common/osutil/flatcar.py
new file mode 100644
index 00000000..eeaf25ce
--- /dev/null
+++ b/azurelinuxagent/common/osutil/flatcar.py
@@ -0,0 +1,78 @@
+#
+# Copyright 2023 Microsoft Corporation
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# Requires Python 2.6+ and Openssl 1.0+
+#
+
+import os
+import os.path
+import shutil
+import stat
+
+import azurelinuxagent.common.conf as conf
+import azurelinuxagent.common.logger as logger
+import azurelinuxagent.common.utils.fileutil as fileutil
+import azurelinuxagent.common.utils.shellutil as shellutil
+
+from azurelinuxagent.common.osutil.coreoscommon import CoreosCommonUtil
+
+class FlatcarUtil(CoreosCommonUtil):
+
+    @staticmethod
+    def get_systemd_unit_file_install_path():
+        return "/etc/systemd/system"
+
+    def conf_sshd(self, disable_password):
+        ssh_dir = conf.get_ssh_dir()
+        snippet_dir = os.path.join(ssh_dir, "sshd_config.d")
+        statinfo = os.lstat(snippet_dir)
+        if stat.S_ISDIR(statinfo.st_mode):
+            # This adds a configuration snippet that will be loaded by
+            # openssh.
+            snippet_file = os.path.join(snippet_dir, "80-flatcar-walinuxagent.conf")
+            option = "no" if disable_password else "yes"
+            lines = [
+                f"PasswordAuthentication {option}",
+                f"ChallengeResponseAuthentication {option}",
+                f"ClientAliveInterval {str(conf.get_ssh_client_alive_interval())}"
+            ]
+            fileutil.write_file(snippet_file, "\n".join(lines))
+            logger.info("Added a configuration snippet {0} SSH password-based authentication methods. It also configures SSH client probing to keep connections alive."
+                        .format("disabling" if disable_password else "enabling"))
+        else:
+            # Make sure that the config file stops being a symlink.
+            conf_file_path = conf.get_sshd_conf_file_path()
+            conf_file_path2 = f"{conf_file_path}.wal.tmp"
+            shutil.copy(conf_file_path, conf_file_path2)
+            os.remove(conf_file_path)
+            os.rename(conf_file_path2, conf_file_path)
+            super(CoreosCommonUtil, self).conf_sshd(disable_password)
+
+    def restart_if(self, ifname, retries=3, wait=5):
+        """
+        Restart an interface by bouncing the link. systemd-networkd observes
+        this event, and forces a renew of DHCP.
+        """
+        retry_limit = retries + 1
+        for attempt in range(1, retry_limit):
+            return_code = shellutil.run("networkctl reconfigure {0}".format(ifname))
+            if return_code == 0:
+                return
+            logger.warn("failed to restart {0}: return code {1}".format(ifname, return_code))
+            if attempt < retry_limit:
+                logger.info("retrying in {0} seconds".format(wait))
+                time.sleep(wait)
+            else:
+                logger.warn("exceeded restart retries")
diff --git a/azurelinuxagent/common/persist_firewall_rules.py b/azurelinuxagent/common/persist_firewall_rules.py
index 74b878ce..22562c96 100644
--- a/azurelinuxagent/common/persist_firewall_rules.py
+++ b/azurelinuxagent/common/persist_firewall_rules.py
@@ -35,6 +35,7 @@ class PersistFirewallRulesHandler(object):
 # Do not edit.
 [Unit]
 Description=Setup network rules for WALinuxAgent 
+After=systemd-sysext.service
 Before=network-pre.target
 Wants=network-pre.target
 DefaultDependencies=no
diff --git a/config/flatcar/waagent.conf b/config/flatcar/waagent.conf
new file mode 100644
index 00000000..b453c634
--- /dev/null
+++ b/config/flatcar/waagent.conf
@@ -0,0 +1,122 @@
+#
+# Microsoft Azure Linux Agent Configuration
+#
+
+# Enable extension handling. Do not disable this unless you do not need password reset,
+# backup, monitoring, or any extension handling whatsoever.
+Extensions.Enabled=y
+
+# Which provisioning agent to use. Supported values are "auto" (default), "waagent",
+# "cloud-init", or "disabled".
+Provisioning.Agent=waagent
+
+# Password authentication for root account will be unavailable.
+Provisioning.DeleteRootPassword=n
+
+# Generate fresh host key pair.
+Provisioning.RegenerateSshHostKeyPair=n
+
+# Supported values are "rsa", "dsa", "ecdsa", "ed25519", and "auto".
+# The "auto" option is supported on OpenSSH 5.9 (2011) and later.
+Provisioning.SshHostKeyPairType=auto
+
+# Monitor host name changes and publish changes via DHCP requests.
+Provisioning.MonitorHostName=y
+
+# Decode CustomData from Base64.
+Provisioning.DecodeCustomData=y
+
+# Execute CustomData after provisioning.
+Provisioning.ExecuteCustomData=n
+
+# Algorithm used by crypt when generating password hash.
+#Provisioning.PasswordCryptId=6
+
+# Length of random salt used when generating password hash.
+#Provisioning.PasswordCryptSaltLength=10
+
+# Allow reset password of sys user
+Provisioning.AllowResetSysUser=n
+
+# Format if unformatted. If 'n', resource disk will not be mounted.
+ResourceDisk.Format=y
+
+# File system on the resource disk
+# Typically ext3 or ext4. FreeBSD images should use 'ufs2' here.
+ResourceDisk.Filesystem=ext4
+
+# Mount point for the resource disk
+ResourceDisk.MountPoint=/mnt/resource
+
+# Create and use swapfile on resource disk.
+ResourceDisk.EnableSwap=n
+
+# Size of the swapfile.
+ResourceDisk.SwapSizeMB=0
+
+# Comma-seperated list of mount options. See mount(8) for valid options.
+ResourceDisk.MountOptions=None
+
+# Respond to load balancer probes if requested by Windows Azure.
+LBProbeResponder=y
+
+# Enable verbose logging (y|n)
+Logs.Verbose=n
+
+# Enable Console logging, default is y
+# Logs.Console=y
+
+# Is FIPS enabled
+OS.EnableFIPS=n
+
+# Set the path to SSH keys and configuration files
+OS.SshDir=/etc/ssh
+
+# Root device timeout in seconds.
+OS.RootDeviceScsiTimeout=300
+
+# If "None", the system default version is used.
+OS.OpensslPath=None
+
+# If set, agent will use proxy server to access internet
+#HttpProxy.Host=None
+#HttpProxy.Port=None
+
+# Detect Scvmm environment, default is n
+# DetectScvmmEnv=n
+
+#
+# Lib.Dir=/var/lib/waagent
+
+#
+# DVD.MountPoint=/mnt/cdrom/secure
+
+#
+# Pid.File=/var/run/waagent.pid
+
+#
+# Extension.LogDir=/var/log/azure
+
+#
+# Home.Dir=/home
+
+# Enable RDMA management and set up, should only be used in HPC images
+# OS.EnableRDMA=y
+
+# Enable or disable goal state processing auto-update, default is enabled
+AutoUpdate.Enabled=n
+
+# Determine the update family, this should not be changed
+# AutoUpdate.GAFamily=Prod
+
+# Determine if the overprovisioning feature is enabled. If yes, hold extension
+# handling until inVMArtifactsProfile.OnHold is false.
+# Default is enabled
+# EnableOverProvisioning=y
+
+# Allow fallback to HTTP if HTTPS is unavailable
+# Note: Allowing HTTP (vs. HTTPS) may cause security risks
+# OS.AllowHTTP=n
+
+# Add firewall rules to protect access to Azure host node services
+OS.EnableFirewall=y
diff --git a/init/flatcar/10-waagent-sysext.conf b/init/flatcar/10-waagent-sysext.conf
new file mode 100644
index 00000000..f756dbc9
--- /dev/null
+++ b/init/flatcar/10-waagent-sysext.conf
@@ -0,0 +1,2 @@
+[Unit]
+Upholds=waagent.service
diff --git a/init/flatcar/waagent.service b/init/flatcar/waagent.service
new file mode 100644
index 00000000..8d2c1f09
--- /dev/null
+++ b/init/flatcar/waagent.service
@@ -0,0 +1,31 @@
+[Unit]
+Description=Microsoft Azure Linux Agent
+Wants=network-online.target sshd.service sshd-keygen.service
+After=network-online.target sshd-keygen.service
+
+[Service]
+Type=simple
+
+# Symlink the config if it's missing in /etc. This is a workaround for
+# the fact that this software comes to Flatcar as a sysext and as such
+# can't use the /etc overlay solution by putting the config into
+# /usr/share/flatcar/etc.
+#
+ExecStartPre=/bin/bash -c 'if [[ ! -e /etc/waagent.conf ]]; then ln -sf ../usr/share/waagent/waagent.conf /etc/waagent.conf; fi'
+ExecStartPre=/bin/bash -c 'if [[ ! -e /oem/waagent.conf ]]; then ln -sf /etc/waagent.conf /oem/waagent.conf; fi'
+
+# This could be done also with:
+#
+# ExecStart=/usr/bin/python -u /usr/sbin/waagent -daemon
+#
+# But this would mean that logs from waagent in journal will be
+# denoted as coming from python instead.
+#
+Environment=PYTHONUNBUFFERED=x
+ExecStart=/usr/sbin/waagent -daemon
+
+Restart=always
+RestartSec=5s
+
+[Install]
+WantedBy=multi-user.target
diff --git a/setup.py b/setup.py
index 8f5d92b4..35400e09 100755
--- a/setup.py
+++ b/setup.py
@@ -135,12 +135,22 @@ def get_data_files(name, version, fullname):  # pylint: disable=R0912
                           src=["init/arch/waagent.service"])
     elif name in ('coreos', 'flatcar'):
         set_bin_files(data_files, dest=agent_bin_path)
-        set_conf_files(data_files, dest="/usr/share/oem",
-                       src=["config/coreos/waagent.conf"])
         set_logrotate_files(data_files)
-        set_udev_files(data_files)
-        set_files(data_files, dest="/usr/share/oem",
-                  src=["init/coreos/cloud-config.yml"])
+        if int(version.split('.')[0]) >= 3550:
+            # Not installing udev rules, Flatcar already has those
+            set_conf_files(data_files, dest="/usr/share/waagent",
+                           src=["config/flatcar/waagent.conf"])
+            set_systemd_files(data_files, dest=systemd_dir_path,
+                              src=["init/flatcar/waagent.service"])
+            multi_user_target_drop_in_dir=f"{systemd_dir_path}/multi-user.target.d"
+            set_systemd_files(data_files, dest=multi_user_target_drop_in_dir,
+                              src=["init/flatcar/10-waagent-sysext.conf"])
+        else:
+            set_udev_files(data_files)
+            set_conf_files(data_files, dest="/usr/share/oem",
+                           src=["config/coreos/waagent.conf"])
+            set_files(data_files, dest="/usr/share/oem",
+                      src=["init/coreos/cloud-config.yml"])
     elif "Clear Linux" in fullname:
         set_bin_files(data_files, dest=agent_bin_path)
         set_conf_files(data_files, dest="/usr/share/defaults/waagent",
-- 
2.45.0

