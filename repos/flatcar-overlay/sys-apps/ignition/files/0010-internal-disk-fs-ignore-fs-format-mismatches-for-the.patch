From 5a3d73b56b1cda394534bedfb12b88893c80b60c Mon Sep 17 00:00:00 2001
From: Mathieu Tortuyaux <mtortuyaux@microsoft.com>
Date: Wed, 22 Sep 2021 14:53:49 +0200
Subject: [PATCH 10/21] internal/disk/fs: ignore fs format mismatches for the
 OEM partition

As soon as the OEM partition's filesystem format changes, all users
that have file entries for the OEM partition (e.g., for kernel
parameters), need to also switch to the new format, otherwise Ignition
will bootloop due to the encountered mismatch error. If users have set
the wipeFilesystem option there is no change in behavior and the user
would create the desired filesystem on each Ignition run.

To spare the users the migration due to an internal detail of the OEM
partition, allow the OEM filesystem format to mismatch and just reuse
the existing OEM partition. The user can still enable the
wipeFilesystem to reformat regardless what content the partition has.

Signed-off-by: Mathieu Tortuyaux <mtortuyaux@microsoft.com>
---
 internal/exec/stages/disks/filesystems.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/internal/exec/stages/disks/filesystems.go b/internal/exec/stages/disks/filesystems.go
index 62dab634..2bd2debd 100644
--- a/internal/exec/stages/disks/filesystems.go
+++ b/internal/exec/stages/disks/filesystems.go
@@ -126,7 +126,7 @@ func (s stage) createFilesystem(fs types.Filesystem) error {
 		}
 		// If the filesystem isn't forcefully being created, then we need
 		// to check if it is of the correct type or that no filesystem exists.
-		if info.Type == fileSystemFormat &&
+		if (info.Type == fileSystemFormat || info.Label == "OEM") &&
 			(fs.Label == nil || info.Label == *fs.Label) &&
 			(fs.UUID == nil || canonicalizeFilesystemUUID(info.Type, info.UUID) == canonicalizeFilesystemUUID(fileSystemFormat, *fs.UUID)) {
 			s.Logger.Info("filesystem at %q is already correctly formatted. Skipping mkfs...", fs.Device)
-- 
2.43.2

