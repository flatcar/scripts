From 21f26593b93415a632449d05e787237d29c79ba3 Mon Sep 17 00:00:00 2001
From: Mathieu Tortuyaux <mtortuyaux@microsoft.com>
Date: Wed, 25 May 2022 10:38:16 +0200
Subject: [PATCH 14/21] Revert "*: drop OEM URI support"

This reverts commit 0c088d6de77aa1b1f47b9252a07f51cb1e249df3.
---
 config/v3_0/types/url.go    |  2 +-
 config/v3_1/types/url.go    |  2 +-
 config/v3_2/types/url.go    |  2 +-
 config/v3_3/types/url.go    |  2 +-
 config/v3_4/types/url.go    |  2 +-
 docs/supported-platforms.md |  1 +
 internal/distro/distro.go   | 11 ++++-
 internal/resource/url.go    | 91 +++++++++++++++++++++++++++++++++++++
 8 files changed, 106 insertions(+), 7 deletions(-)

diff --git a/config/v3_0/types/url.go b/config/v3_0/types/url.go
index 2d8c44b1..f560bc22 100644
--- a/config/v3_0/types/url.go
+++ b/config/v3_0/types/url.go
@@ -30,7 +30,7 @@ func validateURL(s string) error {
 	}
 
 	switch u.Scheme {
-	case "http", "https", "tftp":
+	case "http", "https", "tftp", "oem":
 		return nil
 	case "s3":
 		if v, ok := u.Query()["versionId"]; ok {
diff --git a/config/v3_1/types/url.go b/config/v3_1/types/url.go
index 2d8c44b1..f560bc22 100644
--- a/config/v3_1/types/url.go
+++ b/config/v3_1/types/url.go
@@ -30,7 +30,7 @@ func validateURL(s string) error {
 	}
 
 	switch u.Scheme {
-	case "http", "https", "tftp":
+	case "http", "https", "tftp", "oem":
 		return nil
 	case "s3":
 		if v, ok := u.Query()["versionId"]; ok {
diff --git a/config/v3_2/types/url.go b/config/v3_2/types/url.go
index bf1f3a5e..63297beb 100644
--- a/config/v3_2/types/url.go
+++ b/config/v3_2/types/url.go
@@ -30,7 +30,7 @@ func validateURL(s string) error {
 	}
 
 	switch u.Scheme {
-	case "http", "https", "tftp", "gs":
+	case "http", "https", "tftp", "gs", "oem":
 		return nil
 	case "s3":
 		if v, ok := u.Query()["versionId"]; ok {
diff --git a/config/v3_3/types/url.go b/config/v3_3/types/url.go
index bf1f3a5e..63297beb 100644
--- a/config/v3_3/types/url.go
+++ b/config/v3_3/types/url.go
@@ -30,7 +30,7 @@ func validateURL(s string) error {
 	}
 
 	switch u.Scheme {
-	case "http", "https", "tftp", "gs":
+	case "http", "https", "tftp", "gs", "oem":
 		return nil
 	case "s3":
 		if v, ok := u.Query()["versionId"]; ok {
diff --git a/config/v3_4/types/url.go b/config/v3_4/types/url.go
index 9b2b4405..5258c3c6 100644
--- a/config/v3_4/types/url.go
+++ b/config/v3_4/types/url.go
@@ -32,7 +32,7 @@ func validateURL(s string) error {
 	}
 
 	switch u.Scheme {
-	case "http", "https", "tftp", "gs":
+	case "http", "https", "tftp", "gs", "oem":
 		return nil
 	case "s3":
 		if v, ok := u.Query()["versionId"]; ok {
diff --git a/docs/supported-platforms.md b/docs/supported-platforms.md
index 8dc0feb1..e7dd1dd4 100644
--- a/docs/supported-platforms.md
+++ b/docs/supported-platforms.md
@@ -12,6 +12,7 @@ Ignition is currently only supported for the following platforms:
 * [Amazon Web Services] (`aws`) - Ignition will read its configuration from the instance userdata. Cloud SSH keys are handled separately.
 * [Microsoft Azure] (`azure`)- Ignition will read its configuration from the custom data provided to the instance. Cloud SSH keys are handled separately.
 * [Microsoft Azure Stack] (`azurestack`) - Ignition will read its configuration from the custom data provided to the instance. Cloud SSH keys are handled separately.
+* Bare Metal - Use the `ignition.config.url` kernel parameter to provide a URL to the configuration. The URL can use the `http://`, `https://`, `tftp://`, `s3://`, or `gs://` schemes to specify a remote config or the `oem://` scheme to specify a local config, rooted in `/usr/share/oem`.
 * [Brightbox] (`brightbox`) - Ignition will read its configuration from the instance userdata. Cloud SSH keys are handled separately.
 * [CloudStack] (`cloudstack`) - Ignition will read its configuration from the instance userdata via either metadata service or config drive. Cloud SSH keys are handled separately.
 * [DigitalOcean] (`digitalocean`) - Ignition will read its configuration from the droplet userdata. Cloud SSH keys and network configuration are handled separately.
diff --git a/internal/distro/distro.go b/internal/distro/distro.go
index 35c65721..3886ab56 100644
--- a/internal/distro/distro.go
+++ b/internal/distro/distro.go
@@ -23,13 +23,17 @@ import (
 // -X github.com/flatcar/ignition/v2/internal/distro.mdadmCmd=/opt/bin/mdadm
 var (
 	// Device node directories and paths
-	diskByLabelDir = "/dev/disk/by-label"
+	diskByLabelDir    = "/dev/disk/by-label"
+	diskByPartUUIDDir = "/dev/disk/by-partuuid"
+	oemDevicePath     = "/dev/disk/by-label/OEM"
 
 	// initrd file paths
 	kernelCmdlinePath = "/proc/cmdline"
 	bootIDPath        = "/proc/sys/kernel/random/boot_id"
 	// initramfs directory containing distro-provided base config
 	systemConfigDir = "/usr/lib/ignition"
+	// initramfs directory to check before retrieving file from OEM partition
+	oemLookasideDir = "/usr/share/oem"
 
 	// Helper programs
 	groupaddCmd  = "groupadd"
@@ -82,11 +86,14 @@ var (
 	luksCexSecureKeyRepo    = "/etc/zkey/repository/"
 )
 
-func DiskByLabelDir() string { return diskByLabelDir }
+func DiskByLabelDir() string    { return diskByLabelDir }
+func DiskByPartUUIDDir() string { return diskByPartUUIDDir }
+func OEMDevicePath() string     { return fromEnv("OEM_DEVICE", oemDevicePath) }
 
 func KernelCmdlinePath() string { return kernelCmdlinePath }
 func BootIDPath() string        { return bootIDPath }
 func SystemConfigDir() string   { return fromEnv("SYSTEM_CONFIG_DIR", systemConfigDir) }
+func OEMLookasideDir() string   { return fromEnv("OEM_LOOKASIDE_DIR", oemLookasideDir) }
 
 func GroupaddCmd() string  { return groupaddCmd }
 func GroupdelCmd() string  { return groupdelCmd }
diff --git a/internal/resource/url.go b/internal/resource/url.go
index 8ccf9399..7b13c242 100644
--- a/internal/resource/url.go
+++ b/internal/resource/url.go
@@ -23,10 +23,12 @@ import (
 	"fmt"
 	"hash"
 	"io"
+	"io/ioutil"
 	"net"
 	"net/http"
 	"net/url"
 	"os"
+	"path/filepath"
 	"strings"
 	"syscall"
 	"time"
@@ -34,7 +36,9 @@ import (
 	"cloud.google.com/go/compute/metadata"
 	"cloud.google.com/go/storage"
 	configErrors "github.com/flatcar/ignition/v2/config/shared/errors"
+	"github.com/flatcar/ignition/v2/internal/distro"
 	"github.com/flatcar/ignition/v2/internal/log"
+	"github.com/flatcar/ignition/v2/internal/systemd"
 	"github.com/flatcar/ignition/v2/internal/util"
 	"golang.org/x/oauth2/google"
 	"google.golang.org/api/option"
@@ -154,6 +158,8 @@ func (f *Fetcher) FetchToBuffer(u url.URL, opts FetchOptions) ([]byte, error) {
 		err = f.fetchFromTFTP(u, dest, opts)
 	case "data":
 		err = f.fetchFromDataURL(u, dest, opts)
+	case "oem":
+		err = f.fetchFromOEM(u, dest, opts)
 	case "s3", "arn":
 		buf := &s3buf{
 			WriteAtBuffer: aws.NewWriteAtBuffer([]byte{}),
@@ -215,6 +221,8 @@ func (f *Fetcher) Fetch(u url.URL, dest *os.File, opts FetchOptions) error {
 		return f.fetchFromTFTP(u, dest, opts)
 	case "data":
 		return f.fetchFromDataURL(u, dest, opts)
+	case "oem":
+		return f.fetchFromOEM(u, dest, opts)
 	case "s3", "arn":
 		return f.fetchFromS3(u, dest, opts)
 	case "gs":
@@ -423,6 +431,53 @@ type s3target interface {
 	io.ReadSeeker
 }
 
+// FetchFromOEM gets data off the oem partition as described by u and writes it
+// into dest, returning an error if one is encountered.
+func (f *Fetcher) fetchFromOEM(u url.URL, dest io.Writer, opts FetchOptions) error {
+	path := filepath.Clean(u.Path)
+	if !filepath.IsAbs(path) {
+		f.Logger.Err("oem path is not absolute: %q", u.Path)
+		return ErrPathNotAbsolute
+	}
+
+	// check if present in OEM lookaside dir, if so use it.
+	absPath := filepath.Join(distro.OEMLookasideDir(), path)
+
+	if fi, err := os.Open(absPath); err == nil {
+		defer fi.Close()
+		return f.decompressCopyHashAndVerify(dest, fi, opts)
+	} else if !os.IsNotExist(err) {
+		f.Logger.Err("failed to read oem config: %v", err)
+		return ErrFailed
+	}
+
+	f.Logger.Info("oem config not found in %q, looking on oem partition",
+		distro.OEMLookasideDir())
+
+	oemMountPath, err := ioutil.TempDir("/mnt", "oem")
+	if err != nil {
+		f.Logger.Err("failed to create mount path for oem partition: %v", err)
+		return ErrFailed
+	}
+	// try oemMountPath, requires mounting it.
+	if err := f.mountOEM(oemMountPath); err != nil {
+		f.Logger.Err("failed to mount oem partition: %v", err)
+		return ErrFailed
+	}
+	defer os.Remove(oemMountPath)
+	defer f.umountOEM(oemMountPath)
+
+	absPath = filepath.Join(oemMountPath, path)
+	fi, err := os.Open(absPath)
+	if err != nil {
+		f.Logger.Err("failed to read oem config: %v", err)
+		return ErrFailed
+	}
+	defer fi.Close()
+
+	return f.decompressCopyHashAndVerify(dest, fi, opts)
+}
+
 // FetchFromS3 gets data from an S3 bucket as described by u and writes it into
 // dest, returning an error if one is encountered. It will attempt to acquire
 // IAM credentials from the EC2 metadata service, and if this fails will attempt
@@ -650,3 +705,39 @@ func (f *Fetcher) parseARN(arnURL string) (string, string, string, string, error
 	key := strings.Join(urlSplit[1:], "/")
 	return bucket, key, "", regionHint, nil
 }
+
+// mountOEM waits for the presence of and mounts the oem partition at
+// oemMountPath. oemMountPath will be created if it does not exist.
+func (f *Fetcher) mountOEM(oemMountPath string) error {
+	dev := []string{distro.OEMDevicePath()}
+	if err := systemd.WaitOnDevices(context.Background(), dev, "oem-cmdline"); err != nil {
+		f.Logger.Err("failed to wait for oem device: %v", err)
+		return err
+	}
+
+	if err := os.MkdirAll(oemMountPath, 0700); err != nil {
+		f.Logger.Err("failed to create oem mount point: %v", err)
+		return err
+	}
+
+	if err := f.Logger.LogOp(
+		func() error {
+			return syscall.Mount(dev[0], oemMountPath, "ext4", 0, "")
+		},
+		"mounting %q at %q", distro.OEMDevicePath(), oemMountPath,
+	); err != nil {
+		return fmt.Errorf("failed to mount device %q at %q: %v",
+			distro.OEMDevicePath(), oemMountPath, err)
+	}
+
+	return nil
+}
+
+// umountOEM unmounts the oem partition at oemMountPath.
+func (f *Fetcher) umountOEM(oemMountPath string) {
+	// ignore the error for the linter
+	_ = f.Logger.LogOp(
+		func() error { return syscall.Unmount(oemMountPath, 0) },
+		"unmounting %q", oemMountPath,
+	)
+}
-- 
2.43.2

